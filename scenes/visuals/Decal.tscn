[gd_scene load_steps=5 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="CubeMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix, cull_front, depth_draw_never, depth_test_disable;

uniform sampler2D decal : hint_black;

varying mat4 model_view;

void vertex()
{
	model_view = inverse(MODELVIEW_MATRIX);
	
	NORMAL = vec3(0.0, 0.0, 1.0); 
	TANGENT = vec3(1.0, 0.0, 0.0); 
	BINORMAL = vec3(0.0, 1.0, 0.0);
}

void fragment()
{
	vec4 pos_4 = (model_view * INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r * 2.0 - 1.0, 1.0));
	
	vec3 pos = pos_4.xyz / pos_4.w;
	
	bool inside = all(greaterThanEqual(pos, vec3(-1.0))) && all(lessThanEqual(pos, vec3(1.0)));
	
	if(inside)
	{
		vec4 colour = texture(decal, (pos.xy * -0.5 - 0.5));
		
		ALBEDO = colour.rgb;
		ALPHA = colour.a;
	}
	else
	{
		discard;
	}
}

void light()
{
	
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/decal = ExtResource( 1 )

[node name="Decal" type="MeshInstance"]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )
